/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect,useRef } from 'react'
import { useAnimations, useFBX,useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useControls } from 'leva'
import * as THREE from "three"

export function Avatar(props) {
    const {animation} = props

    const {headFollow, cursorFollow} = useControls({
        headFollow: false,
        cursorFollow: false,
    })
    const group = useRef()

    const { nodes, materials } = useGLTF('models/model.glb')
  
    const {animations: typingAnimation} = useFBX('animations/Typing.fbx')
    const {animations: standingAnimation} = useFBX('animations/Bored.fbx')
    const {animations: fallingAnimation} = useFBX('animations/Falling.fbx')
    const {animations: wavingAnimation} = useFBX('animations/Standing Greeting.fbx')
  
    typingAnimation[0].name = "Typing"
    standingAnimation[0].name = "Standing"
    fallingAnimation[0].name = "Falling"
    wavingAnimation[0].name = "Waving"
  
    const {actions} = useAnimations([typingAnimation[0],standingAnimation[0],fallingAnimation[0],wavingAnimation[0]],group)
    

    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName("Head").lookAt(state.camera.position)
        }
        if (cursorFollow) {
            const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1)
            group.current.getObjectByName("Spine2").lookAt(target)
        }
    })
  
    useEffect(() => {
      actions[animation].reset().fadeIn(0.5).play()
      return() => {
        actions[animation].reset().fadeOut(0.5)
      }
     }, [animation])
  
  return (
    <group {...props} ref={group} dispose={null}>
    <group rotation-x={-Math.PI/ 2}>
    <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Body_Mesh.geometry}
        material={materials.Body}
        skeleton={nodes.Body_Mesh.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Eye_Mesh"
        geometry={nodes.Eye_Mesh.geometry}
        material={materials.Eyes}
        skeleton={nodes.Eye_Mesh.skeleton}
        morphTargetDictionary={nodes.Eye_Mesh.morphTargetDictionary}
        morphTargetInfluences={nodes.Eye_Mesh.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="EyeAO_Mesh"
        geometry={nodes.EyeAO_Mesh.geometry}
        material={materials.EyeAO}
        skeleton={nodes.EyeAO_Mesh.skeleton}
        morphTargetDictionary={nodes.EyeAO_Mesh.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeAO_Mesh.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Eyelash_Mesh"
        geometry={nodes.Eyelash_Mesh.geometry}
        material={materials.Eyelash}
        skeleton={nodes.Eyelash_Mesh.skeleton}
        morphTargetDictionary={nodes.Eyelash_Mesh.morphTargetDictionary}
        morphTargetInfluences={nodes.Eyelash_Mesh.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Head_Mesh"
        geometry={nodes.Head_Mesh.geometry}
        material={materials.Head}
        skeleton={nodes.Head_Mesh.skeleton}
        morphTargetDictionary={nodes.Head_Mesh.morphTargetDictionary}
        morphTargetInfluences={nodes.Head_Mesh.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Teeth_Mesh"
        geometry={nodes.Teeth_Mesh.geometry}
        material={materials.Teeth}
        skeleton={nodes.Teeth_Mesh.skeleton}
        morphTargetDictionary={nodes.Teeth_Mesh.morphTargetDictionary}
        morphTargetInfluences={nodes.Teeth_Mesh.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        name="Tongue_Mesh"
        geometry={nodes.Tongue_Mesh.geometry}
        material={materials.Teeth}
        skeleton={nodes.Tongue_Mesh.skeleton}
        morphTargetDictionary={nodes.Tongue_Mesh.morphTargetDictionary}
        morphTargetInfluences={nodes.Tongue_Mesh.morphTargetInfluences}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.avaturn_glasses_0.geometry}
        material={materials.avaturn_glasses_0_material}
        skeleton={nodes.avaturn_glasses_0.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.avaturn_glasses_1.geometry}
        material={materials.avaturn_glasses_1_material}
        skeleton={nodes.avaturn_glasses_1.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.avaturn_hair_0.geometry}
        material={materials.avaturn_hair_0_material}
        skeleton={nodes.avaturn_hair_0.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.avaturn_hair_1.geometry}
        material={materials.avaturn_hair_1_material}
        skeleton={nodes.avaturn_hair_1.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.avaturn_shoes_0.geometry}
        material={materials.avaturn_shoes_0_material}
        skeleton={nodes.avaturn_shoes_0.skeleton}
        frustumCulled={false}
      />
      <skinnedMesh
        geometry={nodes.avaturn_look_0.geometry}
        material={materials.avaturn_look_0_material}
        skeleton={nodes.avaturn_look_0.skeleton}
        frustumCulled={false}
      />
    </group>
    </group>
  )
}

useGLTF.preload('models/model.glb')